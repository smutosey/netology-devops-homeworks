user nginx;
worker_processes auto;

events {
  worker_connections 1024;
}

http {
  default_type application/octet-stream;
  log_format json escape=json
      '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"http_x_forwarded_for":"$http_x_forwarded_for",'
        '"upstream_connect_time":"$upstream_connect_time",'
        '"upstream_header_time":"$upstream_header_time",'
        '"upstream_response_time":"$upstream_response_time"'
      '}';
  access_log  /var/log/nginx/access.log json;
  error_log   /var/log/nginx/error.log warn;

  # set upstreams for load balancing
  upstream storage_backend {
    server storage:9000;
  }
  upstream uploader_backend {
    server uploader:3000;
  }
  upstream security_backend {
    server security:3000;
  }

  # set gateway routing
  server {
    listen 8080;

    # token validation
    location = /auth {
      internal;
      proxy_pass http://security_backend/v1/token/validation;
      proxy_pass_request_body off;
      proxy_set_header Authorization $http_authorization;
    }

    # register new user (api not implemented)
    location /v1/register {
      proxy_pass http://security_backend/v1/user;
    }

    # get token
    location /v1/token {
      proxy_pass http://security_backend/v1/token;
    }

    # get user (api not implemented)
    location /v1/user {
      auth_request /auth;
      proxy_pass http://security_backend/v1/user;
    }

    # upload file to storage
    location /v1/upload {
      auth_request /auth;
      proxy_pass http://uploader_backend/v1/upload;
    }

    # get image from storage
    location ~ ^/v1/user/([\w.-]+) {
      auth_request /auth;
      proxy_set_header Host $host;
      proxy_pass http://storage_backend/images/$1;
    }
  }

  server {
    listen 8000;
    location = /stub_status {
      stub_status;
    }
  }
}